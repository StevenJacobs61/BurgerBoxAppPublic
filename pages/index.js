import Head from 'next/head'
import styles from '../styles/chooseLocation.module.css'
import Link from 'next/link'
import { locations } from '../data/locations'
import React, { useState, useEffect } from 'react'
import Image from 'next/image'
import logo from "../public/img/logo-light.svg"
import {GiHamburger} from 'react-icons/gi';

export default function SelectLocation() {
  
  const [location, setLocation] = useState(null)

  // Suggest closest location using geolocater
  useEffect(() => {
    const seafordLatitude = 50.7725
    const seafordLongitude = 0.0967
    const eastbourneLatitude = 50.7687
    const eastbourneLongitude = 0.2845
    const getLocation = () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            // Calculate the distance between the user's location and Seaford and Eastbourne
            const distanceToSeaford = calculateDistance(latitude, longitude, seafordLatitude, seafordLongitude);
            const distanceToEastbourne = calculateDistance(latitude, longitude, eastbourneLatitude, eastbourneLongitude);
  
            // Set the default location based on proximity
            setLocation(distanceToSeaford <= distanceToEastbourne ? locations[0].title : locations[1].title);
          },
          () => {
            // If the user denies permission, set the default location to locations[0]
            setLocation(locations[0].title);
          }
        );
      } else {
        // Geolocation is not supported by the browser, set default location to locations[0]
        setLocation(locations[0].title);
      }
    };
    getLocation();
  }, []);
  // Helper function to calculate the distance between two coordinates
  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const dx = lat2 - lat1;
    const dy = lon2 - lon1;
    return Math.sqrt(dx * dx + dy * dy);
  };
  
  const clearCart = () =>{
    localStorage.setItem("Orders", "[]")
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Burger Box Seaford</title>
        <meta name="description" content="Generated by create next app" />
        {/* <link rel="icon" href="/img/order-box.webp" /> */}
      </Head>
      <div className={styles.imgContainer}>
    <Image
      className={styles.img} 
      src={logo} 
      objectFit='fill'
      alt='logo'
      />
      </div>
      <h1 className={styles.selectHeader}>Select BurgerBox Branch:</h1>
      {navigator.geolocation && !location ? <h2 className={styles.findingStore}>Finding nearest store...</h2> : null}
      <div className={styles.locationsContainer}>
      {locations.map((l, i) =>
         <Link href={l.title === "Eastbourne" ? "/" : { pathname: '/home', query: { location: l.title } }} key={i} >
          <div key={i} className={styles.locationContainer} onClick={()=>clearCart()}>
          {l.title === location ? <h2 className={styles.nearestStoreText}>Your nearest Store</h2> : null}
                    <h2 
                    className={styles.storeTitle}
                    style={{color: l.title === "Seaford" ? "var(--bg-color--blue)" : "", opacity: l.title === "Eastbourne" ? "0.5" : ""}}
                    >{l.title === "Seaford" ? (
                      l.title
                    ) : (
                      <>
                        Eastbourne <br /> Opening Soon
                      </>
                    )}</h2>
                <div className={styles.iconContainer}>
                    <GiHamburger className={styles.icon} style={{fill: l.title === "Seaford" ? 'var(--bg-color--blue)' : '', opacity: l.title === "Eastbourne" ? "0.5" : ""}}/>
                </div>
                </div>
          </Link>
      )}
      </div>
      <div className={styles.copyrightContainer}>
        <h2 className={styles.copyright}> Â© Copyright, all rights reserved.</h2>
      </div>
  </div> 
  )
}

export const getServerSideProps = async (context) => {
  const { req } = context;
  const myCookie = req?.cookies.token || "";
let location = 
    myCookie === process.env.NEXT_PUBLIC_SEAFORD_TOKEN ? "Seaford"
  :  myCookie === process.env.NEXT_PUBLIC_EASTBOURNE_TOKEN ? "Eastbourne"
  : null;

if (myCookie){
  const locationQuery = {
    location: location
  };
  const queryString = new URLSearchParams(locationQuery).toString();

  return {
    redirect: {
      destination: `/admin/orders?${queryString}`,
      permanent: false,
    },
  };
}
else{
  return {
    props:{}
  }
  }
}
